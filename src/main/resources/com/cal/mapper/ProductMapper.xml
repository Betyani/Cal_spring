<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cal.mapper.ProductMapper">
	<insert id="productRegister">
		insert into products (name, price, category,
		imageUrl) values
		(#{name}, #{price}, #{category}, #{imageUrl})
	</insert>

	<!-- 상품 삭제 -->
	<delete id="productDelete">
		delete from products where id = #{id}
	</delete>


	<select id="findAll" resultType="com.cal.dto.ProductDto">
		SELECT * FROM products ORDER BY
		id DESC
	</select>

	<select id="findById" parameterType="int"
		resultType="com.cal.dto.ProductDto">
		SELECT * FROM products WHERE id = #{id}
	</select>

	<select id="findWithCriteria"
		resultType="com.cal.dto.ProductDto"
		parameterType="com.cal.dto.ListDto">

		SELECT * FROM products
		<where>
			<if test="keyword != null and keyword != ''">
				name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="category != null and category != ''">
				AND category = #{category}
			</if>
		</where>
		<choose>
			<when test="sort == 'old'">                       <!-- sort 종류 코드임 안하고 싶으면 지우면되는거 밑도 -->
				ORDER BY id ASC
			</when>
			<when test="sort == 'recommend'">
				ORDER BY likeCount DESC, id DESC
			</when>
			<otherwise>
				ORDER BY id DESC
			</otherwise>
		</choose>
		LIMIT #{size} OFFSET #{offset}
	</select>

	<select id="countWithCriteria" resultType="int"
		parameterType="com.cal.dto.ListDto">
		SELECT COUNT(*) FROM products
		<where>
			<if test="keyword != null and keyword != ''">
				name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="category != null and category != ''">
				AND category = #{category}
			</if>
		</where>
	</select>
	<insert id="insertProduct"
		parameterType="com.cal.dto.ProductDto">
		INSERT INTO products (name, price, category, imageUrl,
		keyword)
		VALUES (#{name}, #{price}, #{category}, #{imageUrl},
		#{keyword})
	</insert>

	<!-- 상품 1개 조회 -->
	<select id="selectProductById"
		resultType="com.cal.dto.ProductDto">
		SELECT * FROM products WHERE id = #{id}
	</select>

	<!-- 상품 수정 -->
	<update id="updateProduct">
		UPDATE products
		SET name = #{name},
		price = #{price},
		category = #{category},
		imageUrl = #{imageUrl}
		WHERE id = #{id}
	</update>

	<!-- 상품 추천 (좋아요) -->

	<!-- 추천 기록 저장 -->
	<insert id="insertLike" parameterType="map">
		INSERT INTO product_likes
		(product_id, user_id)
		VALUES (#{productId}, #{userId})
	</insert>

	<!-- 추천 기록 삭제 -->
	<delete id="deleteLike" parameterType="map">
		DELETE FROM product_likes
		WHERE product_id = #{productId} AND user_id = #{userId}
	</delete>

	<!-- products.like_count 증가 -->
	<update id="incrementLikeCount" parameterType="int">
		UPDATE products
		SET likeCount = likeCount + 1
		WHERE id = #{productId}
	</update>

	<!-- products.like_count 감소 -->
	<update id="decrementLikeCount" parameterType="int">
		UPDATE products
		SET likeCount = likeCount - 1
		WHERE id = #{productId} AND likeCount > 0
	</update>

	<!-- 추가된 부분: 로그인한 사용자의 liked 여부까지 가져오기 -->
	<select id="findAllWithLike" resultType="com.cal.dto.ProductDto"
		parameterType="map">
		SELECT p.*,
		CASE WHEN pl.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS liked
		FROM
		products p
		LEFT JOIN product_likes pl
		ON p.id = pl.product_id
		AND pl.user_id = #{userId}
		<where>
			<!-- criteria 제거, Map에 담은 key와 일치시키기 -->
			<if test="keyword != null and keyword != ''">
				name LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="category != null and category != ''">
				AND category = #{category}
			</if>
		</where>
		<choose>
			<when test="sort == 'old'">
				ORDER BY p.id ASC
			</when>
			<when test="sort == 'recommend'">
				ORDER BY p.likeCount DESC, p.id DESC
			</when>
			<otherwise>
				ORDER BY p.id DESC
			</otherwise>
		</choose>
		<!-- 페이징 -->
		LIMIT #{size} OFFSET #{offset}
	</select>


</mapper>